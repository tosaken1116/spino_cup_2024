// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/room_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/room_usecase.go -destination=internal/mock/usecase/mock_room_usecase.go -package=usecase /internal/usecase/room_usecase.go RoomUsecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	usecase "github.com/tosaken1116/spino_cup_2024/backend/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomUsecase is a mock of RoomUsecase interface.
type MockRoomUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRoomUsecaseMockRecorder
}

// MockRoomUsecaseMockRecorder is the mock recorder for MockRoomUsecase.
type MockRoomUsecaseMockRecorder struct {
	mock *MockRoomUsecase
}

// NewMockRoomUsecase creates a new mock instance.
func NewMockRoomUsecase(ctrl *gomock.Controller) *MockRoomUsecase {
	mock := &MockRoomUsecase{ctrl: ctrl}
	mock.recorder = &MockRoomUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomUsecase) EXPECT() *MockRoomUsecaseMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockRoomUsecase) CreateRoom(ctx context.Context, dto *usecase.RoomDTO) (*usecase.RoomDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, dto)
	ret0, _ := ret[0].(*usecase.RoomDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomUsecaseMockRecorder) CreateRoom(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomUsecase)(nil).CreateRoom), ctx, dto)
}

// GetRoom mocks base method.
func (m *MockRoomUsecase) GetRoom(ctx context.Context, id string) (*usecase.RoomDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", ctx, id)
	ret0, _ := ret[0].(*usecase.RoomDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockRoomUsecaseMockRecorder) GetRoom(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockRoomUsecase)(nil).GetRoom), ctx, id)
}

// ListRoom mocks base method.
func (m *MockRoomUsecase) ListRoom(ctx context.Context) ([]*usecase.RoomDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoom", ctx)
	ret0, _ := ret[0].([]*usecase.RoomDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoom indicates an expected call of ListRoom.
func (mr *MockRoomUsecaseMockRecorder) ListRoom(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoom", reflect.TypeOf((*MockRoomUsecase)(nil).ListRoom), ctx)
}

// UpdateRoom mocks base method.
func (m *MockRoomUsecase) UpdateRoom(ctx context.Context, dto *usecase.RoomDTO) (*usecase.RoomDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", ctx, dto)
	ret0, _ := ret[0].(*usecase.RoomDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockRoomUsecaseMockRecorder) UpdateRoom(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockRoomUsecase)(nil).UpdateRoom), ctx, dto)
}
