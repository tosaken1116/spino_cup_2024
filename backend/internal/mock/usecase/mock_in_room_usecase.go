// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/in_room_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/in_room_usecase.go -destination=internal/mock/usecase/mock_in_room_usecase.go -package=usecase /internal/usecase/in_room_usecase.go InRoomUsecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	usecase "github.com/tosaken1116/spino_cup_2024/backend/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockActiveRoomUsecase is a mock of ActiveRoomUsecase interface.
type MockActiveRoomUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockActiveRoomUsecaseMockRecorder
}

// MockActiveRoomUsecaseMockRecorder is the mock recorder for MockActiveRoomUsecase.
type MockActiveRoomUsecaseMockRecorder struct {
	mock *MockActiveRoomUsecase
}

// NewMockActiveRoomUsecase creates a new mock instance.
func NewMockActiveRoomUsecase(ctrl *gomock.Controller) *MockActiveRoomUsecase {
	mock := &MockActiveRoomUsecase{ctrl: ctrl}
	mock.recorder = &MockActiveRoomUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveRoomUsecase) EXPECT() *MockActiveRoomUsecaseMockRecorder {
	return m.recorder
}

// ChangeScreenSize mocks base method.
func (m *MockActiveRoomUsecase) ChangeScreenSize(ctx context.Context, roomID string, height, width int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeScreenSize", ctx, roomID, height, width)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeScreenSize indicates an expected call of ChangeScreenSize.
func (mr *MockActiveRoomUsecaseMockRecorder) ChangeScreenSize(ctx, roomID, height, width any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeScreenSize", reflect.TypeOf((*MockActiveRoomUsecase)(nil).ChangeScreenSize), ctx, roomID, height, width)
}

// JoinRoom mocks base method.
func (m *MockActiveRoomUsecase) JoinRoom(ctx context.Context, userID, roomID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinRoom", ctx, userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinRoom indicates an expected call of JoinRoom.
func (mr *MockActiveRoomUsecaseMockRecorder) JoinRoom(ctx, userID, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinRoom", reflect.TypeOf((*MockActiveRoomUsecase)(nil).JoinRoom), ctx, userID, roomID)
}

// SendPointer mocks base method.
func (m *MockActiveRoomUsecase) SendPointer(ctx context.Context, req *usecase.SendPointerReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPointer", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPointer indicates an expected call of SendPointer.
func (mr *MockActiveRoomUsecaseMockRecorder) SendPointer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPointer", reflect.TypeOf((*MockActiveRoomUsecase)(nil).SendPointer), ctx, req)
}
