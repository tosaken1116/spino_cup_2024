// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/active_room_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repository/active_room_repo.go -destination=internal/mock/domain/repository/mock_active_room_repository.go -package=repository /internal/domain/repository/active_room_repo.go ActiveRoomRepository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/tosaken1116/spino_cup_2024/backend/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockActiveRoomRepo is a mock of ActiveRoomRepo interface.
type MockActiveRoomRepo struct {
	ctrl     *gomock.Controller
	recorder *MockActiveRoomRepoMockRecorder
}

// MockActiveRoomRepoMockRecorder is the mock recorder for MockActiveRoomRepo.
type MockActiveRoomRepoMockRecorder struct {
	mock *MockActiveRoomRepo
}

// NewMockActiveRoomRepo creates a new mock instance.
func NewMockActiveRoomRepo(ctrl *gomock.Controller) *MockActiveRoomRepo {
	mock := &MockActiveRoomRepo{ctrl: ctrl}
	mock.recorder = &MockActiveRoomRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveRoomRepo) EXPECT() *MockActiveRoomRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockActiveRoomRepo) Get(ctx context.Context, roomID string) (*model.AcitveRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, roomID)
	ret0, _ := ret[0].(*model.AcitveRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockActiveRoomRepoMockRecorder) Get(ctx, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockActiveRoomRepo)(nil).Get), ctx, roomID)
}

// Store mocks base method.
func (m *MockActiveRoomRepo) Store(ctx context.Context, room *model.AcitveRoom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockActiveRoomRepoMockRecorder) Store(ctx, room any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockActiveRoomRepo)(nil).Store), ctx, room)
}
