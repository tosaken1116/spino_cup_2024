// Code generated by protoc-gen-ts. DO NOT EDIT.
import type * as RoomSchema from './schema';
import ReconnectingWebSocket from "reconnecting-websocket";
import { useEffect, useRef } from "react";
type Props = {
	baseUrl: string;
	ChangeUserPosition: (payload:RoomSchema.ChangeUserPosition)=>void;
	JoinRoom: (payload:RoomSchema.JoinRoom)=>void;
	onChangeCurrentPosition: (payload:RoomSchema.ChangeCurrentPosition)=>void;
	onChangeCurrentScreen: (payload:RoomSchema.ChangeCurrentScreen)=>void;
}
export const useRoomWSClient = (props:Props) => {
	const connectionRef = useRef<ReconnectingWebSocket | null>(
		null,
	);
	const handleEvents = (e:MessageEvent) =>{
		const data = JSON.parse(e.data);
		switch (data.type) {
				case 'ChangeUserPosition':
					props.ChangeUserPosition(data.payload as RoomSchema.ChangeUserPosition)
					break;
				case 'JoinRoom':
					props.JoinRoom(data.payload as RoomSchema.JoinRoom)
					break;
			}
	}
	const handleChangeCurrentPosition = (payload:RoomSchema.ChangeCurrentPosition) => {
		connectionRef.current?.send(JSON.stringify({type:'ChangeCurrentPosition', payload:payload}))
	}
	const handleChangeCurrentScreen = (payload:RoomSchema.ChangeCurrentScreen) => {
		connectionRef.current?.send(JSON.stringify({type:'ChangeCurrentScreen', payload:payload}))
	}
	useEffect(() => {
			const ws = new ReconnectingWebSocket(props.baseUrl);
			connectionRef.current = ws;
			ws.onmessage = handleEvents;
			return () => {
				ws.close();
			}
	})
	return {
		handleChangeCurrentPosition,
		handleChangeCurrentScreen,
		connection: connectionRef.current
	}
}
