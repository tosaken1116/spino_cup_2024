// Code generated by protoc-gen-ts. DO NOT EDIT.
import type * as RoomSchema from './domain/room/schema';

export const apiClient = (baseUrl: string) => ({
  room: {
		createRoom: async (req: RoomSchema.CreateRoomRequest): Promise<RoomSchema.CreateRoomResponse> => {
			const res = await fetch(`${baseUrl}/v1/rooms`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(req)
			});
			if (!res.ok) {
				throw new Error('Network response was not ok');
			}
			return await res.json();
		},
		getRoom: async (req: RoomSchema.GetRoomRequest): Promise<RoomSchema.GetRoomResponse> => {
			const res = await fetch(`${baseUrl}/v1/rooms/${req.id}`, {
				method: 'GET',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(req)
			});
			if (!res.ok) {
				throw new Error('Network response was not ok');
			}
			return await res.json();
		},
		updateRoom: async (req: RoomSchema.UpdateRoomRequest): Promise<RoomSchema.UpdateRoomResponse> => {
			const res = await fetch(`${baseUrl}/v1/rooms/${req.id}`, {
				method: 'PUT',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(req)
			});
			if (!res.ok) {
				throw new Error('Network response was not ok');
			}
			return await res.json();
		},
		joinRoom: async (req: RoomSchema.JoinRoomRequest): Promise<RoomSchema.JoinRoomResponse> => {
			const res = await fetch(`${baseUrl}/v1/rooms/${req.id}/join`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(req)
			});
			if (!res.ok) {
				throw new Error('Network response was not ok');
			}
			return await res.json();
		},
  },
});
