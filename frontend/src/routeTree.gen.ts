/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as RoomsIndexImport } from './routes/rooms/index'
import { Route as RoomsIdIndexImport } from './routes/rooms/$id/index'
import { Route as RoomIdIndexImport } from './routes/room/$id/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RoomsIndexRoute = RoomsIndexImport.update({
  path: '/rooms/',
  getParentRoute: () => rootRoute,
} as any)

const RoomsIdIndexRoute = RoomsIdIndexImport.update({
  path: '/rooms/$id/',
  getParentRoute: () => rootRoute,
} as any)

const RoomIdIndexRoute = RoomIdIndexImport.update({
  path: '/room/$id/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/rooms/': {
      id: '/rooms/'
      path: '/rooms'
      fullPath: '/rooms'
      preLoaderRoute: typeof RoomsIndexImport
      parentRoute: typeof rootRoute
    }
    '/room/$id/': {
      id: '/room/$id/'
      path: '/room/$id'
      fullPath: '/room/$id'
      preLoaderRoute: typeof RoomIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/rooms/$id/': {
      id: '/rooms/$id/'
      path: '/rooms/$id'
      fullPath: '/rooms/$id'
      preLoaderRoute: typeof RoomsIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/rooms': typeof RoomsIndexRoute
  '/room/$id': typeof RoomIdIndexRoute
  '/rooms/$id': typeof RoomsIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/rooms': typeof RoomsIndexRoute
  '/room/$id': typeof RoomIdIndexRoute
  '/rooms/$id': typeof RoomsIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/rooms/': typeof RoomsIndexRoute
  '/room/$id/': typeof RoomIdIndexRoute
  '/rooms/$id/': typeof RoomsIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/rooms' | '/room/$id' | '/rooms/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/rooms' | '/room/$id' | '/rooms/$id'
  id: '__root__' | '/' | '/rooms/' | '/room/$id/' | '/rooms/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RoomsIndexRoute: typeof RoomsIndexRoute
  RoomIdIndexRoute: typeof RoomIdIndexRoute
  RoomsIdIndexRoute: typeof RoomsIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RoomsIndexRoute: RoomsIndexRoute,
  RoomIdIndexRoute: RoomIdIndexRoute,
  RoomsIdIndexRoute: RoomsIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/rooms/",
        "/room/$id/",
        "/rooms/$id/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/rooms/": {
      "filePath": "rooms/index.tsx"
    },
    "/room/$id/": {
      "filePath": "room/$id/index.tsx"
    },
    "/rooms/$id/": {
      "filePath": "rooms/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
